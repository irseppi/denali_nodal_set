import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import os
import numpy as np
from obspy.geodetics import gps2dist_azimuth
from obspy.core import UTCDateTime
import datetime
import pytz
import obspy

def distance(lat1, lon1, lat2, lon2):
	dist = gps2dist_azimuth(lat1, lon1, lat2, lon2)
	dist_km = dist[0]/1000
	return dist_km

def convert_UTC_to_epoch(timestamp):
	tz_UTC = pytz.timezone('UTC')
	time_format = "%Y-%m-%d %H:%M:%S"
	naive_timestamp = datetime.datetime.strptime(timestamp, time_format)
	aware_timestamp = tz_UTC.localize(naive_timestamp)
	epoch = aware_timestamp.strftime("%s")
	return (int) (epoch)

def calc_time(t,l, vo, c):
	#t is epoch time at time wave is generated by aircraft
	#l is the shortest distance to between the station and aircraft
	#vo is the aircraft velocity
	#c is the speed of aucostic wave propogation
	c = 0.343
	to=t+(sqrt(l**2+(vo*t)**2))/c
	return to

write_out = open('stats_w.txt','w')

min_lon = -150.5
max_lon = -148.5
min_lat = 62.227
max_lat = 64.6


flight_files=[]
filenames = []

color=[]
#Read in color text file to get different flights to be diffrent colors on map
with open('colors.txt','r') as c_in:
	for line in c_in:
		c=str(line[0:7])
		color.append(c)

# Load the seismometer location data
seismo_data = pd.read_csv('nodes_stations.txt', sep="|")
seismo_latitudes = seismo_data['Latitude']
seismo_longitudes = seismo_data['Longitude']
seismo_stations = seismo_data['Latitude']
sta = seismo_data['Station']

for month in (2,4):
	if month == 2:
		month = '02'
		for day in range(11,29):
			day = str(day)
			# assign directory
			directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'

			# iterate over files in directory
			for filename in os.listdir(directory):
				filenames.append(filename)
				f = os.path.join(directory, filename)
				
				# checking if it is a file
				if os.path.isfile(f):
					flight_files.append(f)
	elif month == 3:
		month = '03'
		for day in range(1, 27):
			if day < 10:
				day = '0' + str(day)
				# assign directory
				directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'
			
				# iterate over files in directory
				for filename in os.listdir(directory):
					filenames.append(filename)
					f = os.path.join(directory, filename)
					
					# checking if it is a file
					if os.path.isfile(f):
						flight_files.append(f)
			else:
				day = str(day)
				# assign directory
				directory = '/scratch/irseppi/nodal_data/flightradar24/2019'+month+day+'_positions'
				
				# iterate over files in directory
				for filename in os.listdir(directory):
					filenames.append(filename)
					f = os.path.join(directory, filename)
					
					# checking if it is a file
					if os.path.isfile(f):
						flight_files.append(f)
				

for i, flight_file in enumerate(flight_files):
	flight_data = pd.read_csv(flight_file, sep=",")
	flight_latitudes = flight_data['latitude']
	flight_longitudes = flight_data['longitude']
	time = flight_data['snapshot_id']
	speed = flight_data['speed']
	alt = flight_data['altitude']
	
	for s in range(len(flight_data)-1):
		for l in range(len(seismo_data)):
			
			dist = distance(seismo_latitudes[l], seismo_longitudes[l], flight_latitudes[s], flight_longitudes[s])
			if dist <= 5:			
				write_out.writelines("In file "+filenames[i]+":\n")
				spec_stations =[]
				spec_hours1 = []
				spec_hours2 =[]
				spec_month1 = []
				spec_month2 =[]
				spec_day1 =[]
				spec_day2 =[]
				spec_mins = []
				spec_sec = []

				index_p = 0
				index_s = 0
				dist_on = 5
				fig = plt.figure(figsize=(16,20))
				# Create a scatter plot for the seismometer locations
				for sd in range(len(seismo_data)):
					plt.scatter(seismo_longitudes[sd], seismo_latitudes[sd], c='red')		
					for fd in range(len(flight_data)-1):
						plt.scatter(flight_longitudes[fd], flight_latitudes[fd], c=color[i % len(color)])
						dist = distance(seismo_latitudes[sd], seismo_longitudes[sd], flight_latitudes[fd], flight_longitudes[fd])
						if dist <= 5:
							
							station = str(sta[sd])
							spec_stations.append(station)
							t = str(UTCDateTime(float(time[fd])))
							write_out.writelines("Station "+str(sta[sd])+" is "+str(dist)+" km away from the nearest time stamp at time "+t+'\n')

							ht = datetime.datetime.fromtimestamp(time[fd])
							mins = ht.minute
							secs = ht.second
							spec_mins.append(mins)
							spec_sec.append(secs)

							month = str(ht.month)
							day = str(ht.day)
							if month == '03' and int(day) > 10:
								h = ht.hour+8
							else: 
								h = ht.hour+9
							h_u = str(h+1)
							month2 = month
							if h < 23:			
								day2 = day
							else:
								h_u = '00'
								if month == '02' and day == '28':
									month2 = '03'
									day2 = '01'
								else:
									day2 = str(int(day) + 1)
							spec_hours1.append(str(h))
							spec_hours2.append(h_u)
							spec_month1.append(month)
							spec_month2.append(month2)
							spec_day1.append(day)
							spec_day2.append(day2)
							
								
							#Label stations
							plt.text(seismo_longitudes[sd], seismo_latitudes[sd], sta[sd], fontsize=6)
							plt.scatter(seismo_longitudes[sd], seismo_latitudes[sd], c='pink')

							#Label time stamps with epoch time
							plt.text(flight_longitudes[fd], flight_latitudes[fd], ht, fontsize=8)
							plt.scatter(flight_longitudes[fd], flight_latitudes[fd], c='orange')
								
							if dist < dist_on:
								dist_on = dist
								index_p = fd
								index_s = sd
							
						else:
							continue
			
	
				yy =[flight_latitudes[index_p],  seismo_latitudes[index_s]]
				xx = [flight_longitudes[index_p], seismo_longitudes[index_s]]
				plt.plot(xx,yy, '--', c='orange')
				y = sum(yy)/len(yy)
				x = sum(xx)/len(xx)
				plt.text(x,y, str(round(distance(seismo_latitudes[index_s], seismo_longitudes[index_s], flight_latitudes[index_p], flight_longitudes[index_p]), 2))+'km', fontsize=5)
				t = 'At station '+str(sta[index_s])+': Speed '+str(speed[index_p])+'km/h at '+str(alt[index_p])+'ft'
				plt.text(-150.45, 64.45, t, fontsize = 6)

				# Set labels and title
				plt.xlim(min_lon, max_lon)
				plt.ylim(min_lat, max_lat)
				plt.xlabel('Longitude')
				plt.ylabel('Latitude')
				plt.title(filenames[i])
				plt.savefig('Plane_map_spec/map_'+filenames[i]+'.png')

				for spec in range(len(spec_stations)):
					#here you see spectrograms add flight data (ie. return type of plane, speed, altitude approximate arrival over station(plot as line on spectrogram)
					n = "/scratch/naalexeev/NODAL/2019-"+spec_month1[spec]+"-"+spec_day1[spec]+"T"+spec_hours1[spec]+":00:00.000000Z.2019-"+spec_month2[spec]+"-"+spec_day2[spec]+"T"+spec_hours2[spec]+":00:00.000000Z."+spec_stations[spec]+".mseed"
					if os.path.isfile(n):
						tr = obspy.read(n)
						tr[2].trim(tr[2].stats.starttime + spec_mins[spec] * 60 - 60 + spec_sec[spec], tr[2].stats.starttime + spec_mins[spec] * 60 + 60 + spec_sec[spec])
						# Save the plot
						tr[2].spectrogram(axes = ax1,log=False, outfile = 'Plane_map_spec/spec_'+spec_stations[spec]+'_'+filenames[i]+'.png', fmt='.png', dbscale=True,cmap='hsv', show=False, title = tr[2].stats.starttime + spec_mins[spec] * 60 - 60 + spec_sec[spec])
						tr[2].plot(outfile = 'Plane_map_spec/trace_'+spec_stations[spec]+'_'+filenames[i]+'.png', show = False)
					else:
						continue

				break
			else:
				continue
		
					
